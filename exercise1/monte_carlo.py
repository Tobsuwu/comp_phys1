" This program executes a monte carlo integration "

import numpy as np

def monte_carlo_integration(fun,xmin,xmax,blocks=10,iters=100):

# Calculating the monte carlo integral. The blocks serve as ensembles that are generated by random numbers. The parameter iters determines how many random numbers are in one block. The integral is determined by the mean value of these blocks. The margin of error is calculated from the standard deviation of the blocks.

	block_values=np.zeros((blocks,))
	L=xmax-xmin
	for block in range(blocks):
		for i in range(iters):
			x = xmin+np.random.rand()*L
			block_values[block]+=fun(x)
		block_values[block]/=iters
	I = L*np.mean(block_values)
	dI = L*np.std(block_values)/np.sqrt(blocks)
	return I,dI
	
def func(x):

# Defining the function which integral we wish to calculate.

	return np.sin(x)

def test_mc_int():

# Calculating the integral analytically for comparison.
# f = sin(x), a = 0, b = pi/2 -> F = -cos(x) -> -(cos(pi/2)- cos(0)) = -(0 - 1) = 1

	return 1
	
def main():
	I,dI=monte_carlo_integration(func,0.,np.pi/2,10,100)
	print("Integrated value: {0:0.5f} +/- {1:0.5f}".format(I,2*dI))
	print("Analytical solution:", test_mc_int())
	
if __name__=="__main__":
	main()
